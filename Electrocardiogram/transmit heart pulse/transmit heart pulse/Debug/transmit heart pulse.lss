
transmit heart pulse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000150  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000028  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000d3  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000007c  00000000  00000000  000002f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000e1  00000000  00000000  0000036f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000048  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000016b  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000049  00000000  00000000  00000603  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__vector_12>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
	int packet_position = 1;
	int data = 0xAAFF;

int main(void)
{
	sei();
  82:	78 94       	sei
	UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value into the high byte of the UBRR register
  84:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE; // Load lower 8-bits of the baud rate value into the low byte of the UBRR register
  86:	83 e3       	ldi	r24, 0x33	; 51
  88:	89 b9       	out	0x09, r24	; 9
	//UBRRL = BAUD & 0xFF;
	//UBRRH = (BAUD >> 8) & 0xFF;
	UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << UDRIE);  // Turn on the transmission and reception circuitry,   Enable the USART Recieve Complete interrupt (USART_RXC)
  8a:	88 e3       	ldi	r24, 0x38	; 56
  8c:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); // Use 8-bit character sizes
  8e:	86 e8       	ldi	r24, 0x86	; 134
  90:	80 bd       	out	0x20, r24	; 32
	//DDRB |= (1<<PB0) ;
	//UCSRB
	//display on
	DDRD |= 0xFC;
  92:	81 b3       	in	r24, 0x11	; 17
  94:	8c 6f       	ori	r24, 0xFC	; 252
  96:	81 bb       	out	0x11, r24	; 17
  98:	ff cf       	rjmp	.-2      	; 0x98 <main+0x16>

0000009a <__vector_12>:
    {
    }
}

ISR(USART_UDRE_vect)
{
  9a:	1f 92       	push	r1
  9c:	0f 92       	push	r0
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	0f 92       	push	r0
  a2:	11 24       	eor	r1, r1
  a4:	8f 93       	push	r24
  a6:	9f 93       	push	r25
if (packet_position == 1)
  a8:	80 91 62 00 	lds	r24, 0x0062
  ac:	90 91 63 00 	lds	r25, 0x0063
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	91 05       	cpc	r25, r1
  b4:	49 f4       	brne	.+18     	; 0xc8 <__vector_12+0x2e>
{
	
	UDR = 0xCC;
  b6:	8c ec       	ldi	r24, 0xCC	; 204
  b8:	8c b9       	out	0x0c, r24	; 12
	packet_position = 2;
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	90 93 63 00 	sts	0x0063, r25
  c2:	80 93 62 00 	sts	0x0062, r24
  c6:	3b c0       	rjmp	.+118    	; 0x13e <__vector_12+0xa4>
}
else if (packet_position == 2)
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	91 05       	cpc	r25, r1
  cc:	49 f4       	brne	.+18     	; 0xe0 <__vector_12+0x46>
{
	UDR = 0xCD;
  ce:	8d ec       	ldi	r24, 0xCD	; 205
  d0:	8c b9       	out	0x0c, r24	; 12
	packet_position = 3;
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	90 93 63 00 	sts	0x0063, r25
  da:	80 93 62 00 	sts	0x0062, r24
  de:	2f c0       	rjmp	.+94     	; 0x13e <__vector_12+0xa4>
}else if (packet_position == 3)
  e0:	83 30       	cpi	r24, 0x03	; 3
  e2:	91 05       	cpc	r25, r1
  e4:	49 f4       	brne	.+18     	; 0xf8 <__vector_12+0x5e>
{
	UDR = 0x02;
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	8c b9       	out	0x0c, r24	; 12
	packet_position = 4;
  ea:	84 e0       	ldi	r24, 0x04	; 4
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	90 93 63 00 	sts	0x0063, r25
  f2:	80 93 62 00 	sts	0x0062, r24
  f6:	23 c0       	rjmp	.+70     	; 0x13e <__vector_12+0xa4>
}
else if (packet_position == 4)
  f8:	84 30       	cpi	r24, 0x04	; 4
  fa:	91 05       	cpc	r25, r1
  fc:	41 f4       	brne	.+16     	; 0x10e <__vector_12+0x74>
{
	UDR = 0x00;
  fe:	1c b8       	out	0x0c, r1	; 12
	packet_position = 5;
 100:	85 e0       	ldi	r24, 0x05	; 5
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	90 93 63 00 	sts	0x0063, r25
 108:	80 93 62 00 	sts	0x0062, r24
 10c:	18 c0       	rjmp	.+48     	; 0x13e <__vector_12+0xa4>
}
else if (packet_position == 5)
 10e:	85 30       	cpi	r24, 0x05	; 5
 110:	91 05       	cpc	r25, r1
 112:	51 f4       	brne	.+20     	; 0x128 <__vector_12+0x8e>
{
	UDR = data;
 114:	80 91 60 00 	lds	r24, 0x0060
 118:	8c b9       	out	0x0c, r24	; 12
	packet_position = 6;
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	90 93 63 00 	sts	0x0063, r25
 122:	80 93 62 00 	sts	0x0062, r24
 126:	0b c0       	rjmp	.+22     	; 0x13e <__vector_12+0xa4>
}
else if(packet_position == 6)
 128:	06 97       	sbiw	r24, 0x06	; 6
 12a:	49 f4       	brne	.+18     	; 0x13e <__vector_12+0xa4>
{
	UDR = (data>>8);
 12c:	80 91 61 00 	lds	r24, 0x0061
 130:	8c b9       	out	0x0c, r24	; 12
	packet_position = 1;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	90 93 63 00 	sts	0x0063, r25
 13a:	80 93 62 00 	sts	0x0062, r24
}

}
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
